{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\chaingame\\\\client\\\\src\\\\components\\\\WordInput.tsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WordInput = ({\n  historyState: [history, setHistory]\n}) => {\n  _s();\n  var _Array$from$at2;\n  const [submitDebounce, setSubmitDebounce] = useState(false);\n  const [wordError, setWordError] = useState(\"\");\n  const toUniqueNames = arr => Array.from(new Set(arr.map(i => i.vernacularName.toUpperCase())));\n  const validateAnimal = async search => {\n    try {\n      if (history.has(search)) {\n        throw Error(\"Animal was already used.\");\n      }\n      const response = await fetch([url, params, search].join(\"\"));\n      const {\n        results\n      } = await response.json();\n      if (!results.length) {\n        throw Error(\"Animal could not be found.\");\n      }\n      const fetchedNames = results.map(a => a.vernacularNames);\n      const fetchedNamesSorted = fetchedNames.sort((a, b) => a.length - b.length);\n      const matchingNames = fetchedNamesSorted.find(arr => {\n        return arr.some(({\n          vernacularName,\n          language\n        }) => vernacularName.toUpperCase() === search && language === \"eng\");\n      });\n      if (!matchingNames) {\n        throw Error(\"Animal could not be found.\");\n      }\n      const matchingNamesEnglish = matchingNames.filter(({\n        language\n      }) => language === \"eng\");\n      const matchingNamesUnique = toUniqueNames(matchingNamesEnglish);\n      return matchingNamesUnique;\n    } catch (err) {\n      if (err instanceof Error) {\n        setWordError(err.toString().split(\":\")[1]);\n        setTimeout(() => setWordError(\"\"), 2000);\n      }\n      ;\n    }\n    ;\n  };\n  const submitSearch = e => {\n    // React.FormEvent<HTMLFormElement>\n    e.preventDefault();\n    if (!submitDebounce) {\n      setSubmitDebounce(true);\n      setTimeout(async () => {\n        var _Array$from$at;\n        const previousEndLetter = (_Array$from$at = Array.from(history).at(-1)) === null || _Array$from$at === void 0 ? void 0 : _Array$from$at.at(-1);\n        const word = previousEndLetter ? previousEndLetter + e.target.animal.value : e.target.animal.value;\n        const animalValidated = await validateAnimal(word.toUpperCase());\n        // console.log(\"found:\", animalValidated);\n\n        if (animalValidated) {\n          setHistory(prev => new Set([...Array.from(prev), word.toUpperCase()]));\n          e.target.animal.value = \"\";\n          socket.emit(\"animal\", word.toUpperCase());\n        }\n        ;\n        setSubmitDebounce(false);\n      }, 30);\n    }\n    ;\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"wordForm\",\n    onSubmit: e => submitSearch(e),\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"firstLetter\",\n      children: (_Array$from$at2 = Array.from(history).at(-1)) === null || _Array$from$at2 === void 0 ? void 0 : _Array$from$at2.at(-1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"wordField\",\n      type: \"text\",\n      name: \"animal\",\n      placeholder: history.size ? \"\" : \"animal common name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: wordError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(WordInput, \"6e7JyT/g/ONkRkoD97V6ULqAw0k=\");\n_c = WordInput;\nvar _c;\n$RefreshReg$(_c, \"WordInput\");","map":{"version":3,"names":["WordInput","historyState","history","setHistory","_s","_Array$from$at2","submitDebounce","setSubmitDebounce","useState","wordError","setWordError","toUniqueNames","arr","Array","from","Set","map","i","vernacularName","toUpperCase","validateAnimal","search","has","Error","response","fetch","url","params","join","results","json","length","fetchedNames","a","vernacularNames","fetchedNamesSorted","sort","b","matchingNames","find","some","language","matchingNamesEnglish","filter","matchingNamesUnique","err","toString","split","setTimeout","submitSearch","e","preventDefault","_Array$from$at","previousEndLetter","at","word","target","animal","value","animalValidated","prev","socket","emit","_jsxDEV","className","onSubmit","autoComplete","children","fileName","_jsxFileName","lineNumber","columnNumber","type","name","placeholder","size","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/chaingame/client/src/components/WordInput.tsx"],"sourcesContent":["export const WordInput = ({\n  historyState: [history, setHistory], \n}: {\n  historyState: [Set<string>, React.Dispatch<React.SetStateAction<Set<string>>>], \n}) => {\n\n  const [submitDebounce, setSubmitDebounce] = useState<boolean>(false);\n  const [wordError, setWordError] = useState<string>(\"\");\n\n  const toUniqueNames = (arr: Array<{vernacularName: string, language: string}>) => Array.from(new Set(arr.map(i => i.vernacularName.toUpperCase())));\n\n  const validateAnimal = async (search: string) => {\n    try {\n\n      if (history.has(search)) { throw Error (\"Animal was already used.\") }\n\n      const response = await fetch([url, params, search].join(\"\"));\n      const { results } = await response.json();\n\n      if (!results.length) { throw Error (\"Animal could not be found.\") }\n\n      const fetchedNames = results.map((a: any) => a.vernacularNames);\n      const fetchedNamesSorted = fetchedNames.sort((a: any[], b: any[]) => a.length - b.length);\n      const matchingNames = fetchedNamesSorted.find((arr: Array<{vernacularName: string, language: string}>) => {\n        return arr.some(({ vernacularName, language }) => vernacularName.toUpperCase() === search && language === \"eng\")\n      });\n\n      if (!matchingNames) { throw Error (\"Animal could not be found.\") }\n\n      const matchingNamesEnglish = matchingNames.filter(({language}: {language: string}) => language === \"eng\");\n      const matchingNamesUnique = toUniqueNames(matchingNamesEnglish);\n  \n      return matchingNamesUnique;\n\n    } catch(err: any) { \n      if (err instanceof Error) {\n        setWordError(err.toString().split(\":\")[1]);\n        setTimeout(() => setWordError(\"\"), 2000);\n      };\n    };\n  };\n\n  const submitSearch = (e: any) => { // React.FormEvent<HTMLFormElement>\n    e.preventDefault();\n\n    if (!submitDebounce) {\n      setSubmitDebounce(true);\n      setTimeout(async () => {\n\n        const previousEndLetter = Array.from(history).at(-1)?.at(-1);\n        const word = previousEndLetter ? previousEndLetter + e.target.animal.value : e.target.animal.value;\n\n        const animalValidated = await validateAnimal(word.toUpperCase());\n        // console.log(\"found:\", animalValidated);\n\n        if (animalValidated) {\n          setHistory(prev => new Set([...Array.from(prev), word.toUpperCase()]));\n          e.target.animal.value = \"\";\n          socket.emit(\"animal\", word.toUpperCase());\n        };\n\n        setSubmitDebounce(false);\n      }, 30); \n    };\n  };\n\n  return (\n    <form \n      className=\"wordForm\"\n      onSubmit={e => submitSearch(e)}\n      autoComplete=\"off\"\n    >\n      <span className=\"firstLetter\">\n        {Array.from(history).at(-1)?.at(-1)}\n      </span>\n      <input \n        className=\"wordField\"\n        type=\"text\" \n        name=\"animal\"\n        placeholder={history.size ? \"\" : \"animal common name\"}\n      />\n      <div className=\"error\">\n        {wordError}\n      </div>\n    </form>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}