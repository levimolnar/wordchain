{"ast":null,"code":"import{useContext,useEffect,useState}from'react';import{History}from'./components/History';import{WordInput}from'./components/WordInput';import'./App.css';import{SocketContext}from'./context/socket';import{GameContext}from'./context/game';// import { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const PlayerPanel=_ref=>{let{players,turnId}=_ref;const socket=useContext(SocketContext);if(!players.length)return/*#__PURE__*/_jsx(\"div\",{className:\"playerPanel\",children:\"unconnected\"});return/*#__PURE__*/_jsxs(\"div\",{className:\"playerPanel\",children:[/*#__PURE__*/_jsxs(\"b\",{style:{lineHeight:\"2em\",fontSize:\".8em\"},children:[\"ROOM (\",players.length,\"):\"]}),players.map((playerName,index)=>/*#__PURE__*/_jsxs(\"div\",{className:playerName===turnId?\"activePlayerName\":\"playerName\",children:[playerName===turnId?\"●\\xa0\":\"\\xa0\\xa0\",\"PLAYER \",index+1,playerName===socket.id?\"\\xa0(you)\":\"\"]},playerName))]});};const Title=()=>/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"title\",children:\"WORD CHAIN\"}),/*#__PURE__*/_jsx(\"div\",{className:\"subtitle\",children:\"ANIMALS EDITION\"})]});const TitleLogo=()=>/*#__PURE__*/_jsxs(\"div\",{className:\"logo\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"title\",children:\"WORD CHAIN\"}),/*#__PURE__*/_jsx(\"div\",{className:\"subtitle\",children:\"ANIMALS EDITION\"})]});const RoomDisplay=()=>{const socket=useContext(SocketContext);const{roomState:[roomId,setRoomId]}=useContext(GameContext);return/*#__PURE__*/_jsx(\"div\",{className:\"roomDisplay\",children:roomId?/*#__PURE__*/_jsxs(\"div\",{className:\"roomIdDisplay\",children:[\"localhost:3000?\",roomId]}):/*#__PURE__*/_jsx(\"button\",{className:\"roomButton\",onClick:()=>{socket.emit(\"createRoom\",response=>{setRoomId(response.roomId);window.history.replaceState(null,\"\",\"?\".concat(response.roomId));});},children:\"CREATE ROOM\"})});};const GameSetup=_ref2=>{let{startFunc}=_ref2;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Title,{}),/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",width:\"50%\",// backgroundColor: \"#ff000055\",\ngap:\"30px\"},children:[/*#__PURE__*/_jsx(\"button\",{className:\"startButton\",onClick:()=>startFunc(),children:\"START GAME\"}),/*#__PURE__*/_jsx(RoomDisplay,{})]})]});};const GameInProgress=()=>{return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TitleLogo,{}),/*#__PURE__*/_jsx(History,{}),/*#__PURE__*/_jsx(WordInput,{})]});};const GameWaiting=()=>{return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TitleLogo,{}),/*#__PURE__*/_jsx(\"div\",{style:{color:\"white\"},children:\"Game already in progress. Stay in this lobby to join when it ends.\"})]});};const App=()=>{const socket=useContext(SocketContext);const{roomState:[roomId,setRoomId],playerState:[players,setPlayers],turnClientState:[turnClientId,setTurnClientId],historyState:[,setHistory]}=useContext(GameContext);// const [roomId, setRoomId] = useState<string[]>([]);\nconst[gameStatus,setGameStatus]=useState(\"setup\");useEffect(()=>{// join room if url contains room id parameter\nconst urlString=window.location.search.slice(1);if(urlString){socket.emit(\"joinRoom\",urlString,response=>{if(response.success){setRoomId(urlString);// if (response.status === \"setup\") { \n//   setGameStatus(\"setup\");\n//   console.log(`Joined room \"${urlString}\".`)\n// };\nif(response.status===\"inProgress\"){setGameStatus(\"waiting\");console.log(\"Game is already in progress.\");};}else{// console.log(`Failed to join room \"${urlString}\"`);\nwindow.history.pushState(null,\"\",window.location.href.split(\"?\")[0]);};});};socket.on(\"playerUpdate\",newPlayers=>setPlayers(newPlayers));socket.on(\"gameStarted\",()=>setGameStatus(\"started\"));socket.on(\"gameEnded\",()=>setGameStatus(\"setup\"));// socket.on(\"gameInProgress\", () => setGameStatus(\"waiting\"));\nsocket.on(\"nextTurn\",(newWordObj,turnId)=>{if(newWordObj){setHistory(prev=>new Map([...Array.from(prev),[newWordObj.word,{userId:newWordObj.userId,userNumber:newWordObj.userNumber}]]));};setTurnClientId(turnId);});});// start game\nconst startGame=()=>{if(roomId){socket.emit(\"start\");}else{console.log(\"Cannot start game without joining room.\");}};const statusSwitch=()=>{switch(gameStatus){case\"setup\":return/*#__PURE__*/_jsx(GameSetup,{startFunc:startGame});case\"started\":return/*#__PURE__*/_jsx(GameInProgress,{});case\"waiting\":return/*#__PURE__*/_jsx(GameWaiting,{});default:return/*#__PURE__*/_jsx(_Fragment,{});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(PlayerPanel,{players:players,turnId:turnClientId}),statusSwitch()]});};export default App;","map":{"version":3,"names":["useContext","useEffect","useState","History","WordInput","SocketContext","GameContext","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PlayerPanel","_ref","players","turnId","socket","length","className","children","style","lineHeight","fontSize","map","playerName","index","id","Title","TitleLogo","RoomDisplay","roomState","roomId","setRoomId","onClick","emit","response","window","history","replaceState","concat","GameSetup","_ref2","startFunc","display","width","gap","GameInProgress","GameWaiting","color","App","playerState","setPlayers","turnClientState","turnClientId","setTurnClientId","historyState","setHistory","gameStatus","setGameStatus","urlString","location","search","slice","success","status","console","log","pushState","href","split","on","newPlayers","newWordObj","prev","Map","Array","from","word","userId","userNumber","startGame","statusSwitch"],"sources":["C:/Users/Levi/Documents/GithubRepositories/chaingame/client/src/App.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\r\nimport { History } from './components/History';\r\nimport { WordInput } from './components/WordInput';\r\n\r\nimport './App.css';\r\nimport { SocketContext } from './context/socket';\r\nimport { GameContext } from './context/game';\r\n\r\n// import { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst PlayerPanel = ({ players, turnId }: { players: string[], turnId: string }) => { \r\n\r\n  const socket = useContext(SocketContext);\r\n\r\n  if (!players.length) return (\r\n    <div className=\"playerPanel\">\r\n      unconnected\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"playerPanel\">\r\n      <b style={{lineHeight: \"2em\", fontSize: \".8em\"}}>\r\n        ROOM ({players.length}):\r\n      </b>\r\n      {players.map((playerName, index)=> \r\n        <div \r\n          className={(playerName === turnId) ? \"activePlayerName\" : \"playerName\"}\r\n          key={playerName}\r\n        >\r\n          {(playerName === turnId) ? \"●\\xa0\" : \"\\xa0\\xa0\"} \r\n          PLAYER {index + 1}\r\n          {(playerName === socket.id) ? \"\\xa0(you)\" : \"\"}\r\n        </div>\r\n      )}\r\n      {/* <div style={{lineHeight: \"2em\", fontSize: \".8em\", paddingTop: \"10px\"}}>\r\n        WAITING (-):\r\n      </div> */}\r\n      {/* {players.map(playerName => \r\n        <div \r\n          className={(turnId === playerName) ? \"activePlayerName\" : \"playerName\"}\r\n          key={playerName}\r\n        >\r\n          {playerName}\r\n        </div>\r\n      )} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Title = () => (\r\n  <>\r\n    <div className=\"title\">WORD CHAIN</div>\r\n    <div className=\"subtitle\">ANIMALS EDITION</div>\r\n  </>\r\n);\r\n\r\nconst TitleLogo = () => (\r\n  <div className=\"logo\">\r\n    <div className=\"title\">WORD CHAIN</div>\r\n    <div className=\"subtitle\">ANIMALS EDITION</div>\r\n  </div>\r\n);\r\n\r\n\r\nconst RoomDisplay = () => {\r\n\r\n  const socket = useContext(SocketContext);\r\n  const { roomState: [roomId, setRoomId] } = useContext(GameContext);\r\n\r\n  return (\r\n    <div className=\"roomDisplay\">\r\n      {\r\n        roomId\r\n        ? (\r\n          <div\r\n            className=\"roomIdDisplay\"\r\n          >\r\n            {/* molnar.dev/wordchain?{roomId} */}\r\n            localhost:3000?{roomId}\r\n          </div>\r\n        )\r\n        : (\r\n          <button\r\n            className=\"roomButton\"\r\n            onClick={() => {\r\n              socket.emit(\"createRoom\", (response: {roomId: string}) => {\r\n                setRoomId(response.roomId);\r\n                window.history.replaceState(null, \"\", `?${response.roomId}`);\r\n              });\r\n            }}\r\n          >\r\n            CREATE ROOM\r\n          </button>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nconst GameSetup = ({ startFunc }: { startFunc: Function }) => { \r\n  return (\r\n    <>\r\n      <Title />\r\n      <div style={{\r\n        display: \"flex\", \r\n        width: \"50%\", \r\n        // backgroundColor: \"#ff000055\",\r\n        gap: \"30px\",\r\n      }}>\r\n        <button\r\n          className=\"startButton\"\r\n          onClick={() => startFunc()}\r\n        >\r\n          START GAME\r\n        </button>\r\n        <RoomDisplay />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst GameInProgress = () => { \r\n  return (\r\n    <>\r\n      <TitleLogo />\r\n      {/* <div className=\"mainContent\"> */}\r\n      <History />\r\n      <WordInput />\r\n      {/* </div> */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst GameWaiting = () => { \r\n  return (\r\n    <>\r\n      <TitleLogo />\r\n      <div style={{color: \"white\"}}>\r\n        Game already in progress. Stay in this lobby to join when it ends.\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n\r\n  const socket = useContext(SocketContext);\r\n  const {\r\n    roomState: [roomId, setRoomId],\r\n    playerState: [players, setPlayers], \r\n    turnClientState: [turnClientId, setTurnClientId], \r\n    historyState: [, setHistory],\r\n  } = useContext(GameContext);\r\n\r\n  // const [roomId, setRoomId] = useState<string[]>([]);\r\n  const [gameStatus, setGameStatus] = useState<\"setup\" | \"started\" | \"waiting\">(\"setup\");\r\n  useEffect(() => {\r\n\r\n    // join room if url contains room id parameter\r\n    const urlString = window.location.search.slice(1);\r\n    if (urlString) { \r\n      socket.emit(\"joinRoom\", urlString, (response: any) => {\r\n        if (response.success) {\r\n          setRoomId(urlString);\r\n          // if (response.status === \"setup\") { \r\n          //   setGameStatus(\"setup\");\r\n          //   console.log(`Joined room \"${urlString}\".`)\r\n          // };\r\n          if (response.status === \"inProgress\") { \r\n            setGameStatus(\"waiting\"); \r\n            console.log(\"Game is already in progress.\");\r\n          };\r\n        } else {\r\n          // console.log(`Failed to join room \"${urlString}\"`);\r\n          window.history.pushState(null, \"\", window.location.href.split(\"?\")[0]);\r\n        };\r\n      });\r\n    };\r\n\r\n    socket.on(\"playerUpdate\", newPlayers => setPlayers(newPlayers));\r\n    socket.on(\"gameStarted\", () => setGameStatus(\"started\"));\r\n    socket.on(\"gameEnded\", () => setGameStatus(\"setup\"));\r\n    // socket.on(\"gameInProgress\", () => setGameStatus(\"waiting\"));\r\n\r\n    socket.on(\"nextTurn\", (newWordObj, turnId) => {\r\n      if (newWordObj) { setHistory(prev => new Map([...Array.from(prev), [newWordObj.word, {userId: newWordObj.userId, userNumber: newWordObj.userNumber}]])) };\r\n      setTurnClientId(turnId);\r\n    });\r\n  });\r\n\r\n  // start game\r\n  const startGame = () => { \r\n    if (roomId) {\r\n      socket.emit(\"start\") \r\n    } else {\r\n      console.log(\"Cannot start game without joining room.\")\r\n    }\r\n  };\r\n\r\n  const statusSwitch = () => {\r\n    switch(gameStatus) {\r\n      case \"setup\":\r\n        return <GameSetup startFunc={startGame} />;\r\n      case \"started\":\r\n        return <GameInProgress />;\r\n      case \"waiting\":\r\n        return <GameWaiting />;\r\n      default:\r\n        return <></>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <PlayerPanel players={players} turnId={turnClientId}/>\r\n      { statusSwitch() }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}