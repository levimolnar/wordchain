{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Documents\\\\GithubRepositories\\\\chaingame\\\\client\\\\src\\\\components\\\\WordInput.tsx\",\n  _s = $RefreshSig$();\nimport { useContext, useState } from \"react\";\nimport { SocketContext } from \"../context/socket\";\nimport { GameContext } from \"../context/game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst url = \"https://api.gbif.org/v1/species/search\";\nconst params = \"?highertaxon_key=1&qField=VERNACULAR&limit=250&q=\";\nexport const WordInput = () => {\n  _s();\n  var _Array$from$at2, _Array$from$at2$;\n  const socket = useContext(SocketContext);\n  const {\n    // playerState: [players, setPlayers], \n    turnClientState: [turnClientId],\n    historyState: [history]\n  } = useContext(GameContext);\n  const [submitDebounce, setSubmitDebounce] = useState(false);\n  const [wordError, setWordError] = useState(\"\");\n  const toUniqueNames = arr => Array.from(new Set(arr.map(i => i.vernacularName.toUpperCase())));\n\n  // const validateAnimal = async (search: string) => {\n  //   try {\n\n  //     if (history.has(search)) { throw Error (\"Animal name was already used.\") }\n\n  //     // fetch animals where vernacular name contains search\n  //     const response = await fetch([url, params, search].join(\"\"));\n  //     const { results } = await response.json();\n\n  //     console.log(results);\n\n  //     if (!results.length) { throw Error (`Could not find animal named \"${search}\".`) }\n\n  //     // find exact match of vernacular name\n  //     const fetchedNames = results.map((a: any) => a.vernacularNames);\n  //     const fetchedNamesSorted = fetchedNames.sort((a: any[], b: any[]) => a.length - b.length);\n  //     const matchingNames = fetchedNamesSorted.find((arr: Array<{vernacularName: string, language: string}>) => {\n  //       return arr.some(({ vernacularName, language }) => vernacularName.toUpperCase() === search && language === \"eng\")\n  //     });\n\n  //     if (!matchingNames) { throw Error (`Could not find animal named \"${search}\".`) }\n\n  //     // get all english vernacular names of found animal\n  //     const matchingNamesEnglish = matchingNames.filter(({language}: {language: string}) => language === \"eng\");\n  //     const matchingNamesUnique = toUniqueNames(matchingNamesEnglish);\n\n  //     return matchingNamesUnique;\n\n  //   } catch(err: any) { \n  //     if (err instanceof Error) {\n  //       setWordError(err.toString().split(\":\")[1]);\n  //       setTimeout(() => setWordError(\"\"), 2000);\n  //     };\n  //   };\n  // };\n\n  const validateAnimal = async search => {\n    try {\n      if (history.has(search)) {\n        throw Error(\"Animal name was already used.\");\n      }\n\n      // fetch animals where vernacular name contains search\n      const response = await fetch([url, params, search].join(\"\"));\n      const {\n        results\n      } = await response.json();\n\n      // console.log(results);\n\n      if (!results.length) {\n        throw Error(`Could not find animal named \"${search}\".`);\n      }\n\n      // find exact match of vernacular name\n      const matchingAnimal = results.find(animal => {\n        const matchingVernacularName = animal.vernacularNames.find(name => {\n          return name.vernacularName.toUpperCase() === search && name.language === \"eng\";\n        });\n        return matchingVernacularName !== undefined;\n      });\n      if (!matchingAnimal) {\n        throw Error(`Could not find animal named \"${search}\".`);\n      }\n\n      // Get all english vernacular names and scientific name of the found animal\n      const matchingVernacularNamesEnglish = matchingAnimal.vernacularNames.filter(({\n        language\n      }) => language === \"eng\").map(({\n        vernacularName\n      }) => vernacularName);\n      const scientificName = matchingAnimal.scientificName;\n      return {\n        sname: scientificName.split(/[\\s,]+/).slice(0, 2).join(\" \"),\n        vnames: matchingVernacularNamesEnglish\n      };\n    } catch (err) {\n      if (err instanceof Error) {\n        setWordError(err.toString().split(\":\")[1]);\n        setTimeout(() => setWordError(\"\"), 2000);\n      }\n      ;\n    }\n    ;\n  };\n  const submitSearch = e => {\n    e.preventDefault();\n    if (!submitDebounce) {\n      setSubmitDebounce(true);\n      setTimeout(async () => {\n        var _Array$from$at, _Array$from$at$;\n        const endLetter = (_Array$from$at = Array.from(history).at(-1)) === null || _Array$from$at === void 0 ? void 0 : (_Array$from$at$ = _Array$from$at[0]) === null || _Array$from$at$ === void 0 ? void 0 : _Array$from$at$.at(-1);\n        const word = endLetter ? endLetter + e.target.animal.value : e.target.animal.value;\n        const animalValidated = await validateAnimal(word.toUpperCase());\n        console.log(animalValidated === null || animalValidated === void 0 ? void 0 : animalValidated.sname);\n        if (animalValidated) {\n          // const newHistory = [...Array.from(history), word.toUpperCase()];\n          // socket.emit(\"submit\", newHistory);\n          socket.emit(\"submit\", word.toUpperCase());\n          e.target.animal.value = \"\";\n        }\n        ;\n        setSubmitDebounce(false);\n      }, 30);\n    }\n    ;\n  };\n\n  // console.log(history, history.size);\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"wordForm\",\n    onSubmit: e => submitSearch(e),\n    autoComplete: \"off\",\n    children: [turnClientId === socket.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"firstLetter\",\n        children: history.size ? (_Array$from$at2 = Array.from(history).at(-1)) === null || _Array$from$at2 === void 0 ? void 0 : (_Array$from$at2$ = _Array$from$at2[0]) === null || _Array$from$at2$ === void 0 ? void 0 : _Array$from$at2$.at(-1) : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"wordField\",\n        type: \"text\",\n        name: \"animal\",\n        placeholder: history.size ? \"...\" : \"animal name (common)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordDisplay\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"Wait for other players to finish turn ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: wordError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(WordInput, \"Lfh2BnbljSP+agwpu4NaMZZVElE=\");\n_c = WordInput;\nvar _c;\n$RefreshReg$(_c, \"WordInput\");","map":{"version":3,"names":["useContext","useState","SocketContext","GameContext","jsxDEV","_jsxDEV","Fragment","_Fragment","url","params","WordInput","_s","_Array$from$at2","_Array$from$at2$","socket","turnClientState","turnClientId","historyState","history","submitDebounce","setSubmitDebounce","wordError","setWordError","toUniqueNames","arr","Array","from","Set","map","i","vernacularName","toUpperCase","validateAnimal","search","has","Error","response","fetch","join","results","json","length","matchingAnimal","find","animal","matchingVernacularName","vernacularNames","name","language","undefined","matchingVernacularNamesEnglish","filter","scientificName","sname","split","slice","vnames","err","toString","setTimeout","submitSearch","e","preventDefault","_Array$from$at","_Array$from$at$","endLetter","at","word","target","value","animalValidated","console","log","emit","className","onSubmit","autoComplete","children","id","size","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Documents/GithubRepositories/chaingame/client/src/components/WordInput.tsx"],"sourcesContent":["import { useContext, useState } from \"react\";\r\nimport { SocketContext } from \"../context/socket\";\r\nimport { GameContext } from \"../context/game\";\r\n\r\nconst url = \"https://api.gbif.org/v1/species/search\"\r\nconst params = \"?highertaxon_key=1&qField=VERNACULAR&limit=250&q=\"\r\n\r\nexport const WordInput = () => {\r\n\r\n  const socket = useContext(SocketContext);\r\n  const {\r\n    // playerState: [players, setPlayers], \r\n    turnClientState: [turnClientId], \r\n    historyState: [history],\r\n  } = useContext(GameContext);\r\n\r\n  const [submitDebounce, setSubmitDebounce] = useState<boolean>(false);\r\n  const [wordError, setWordError] = useState<string>(\"\");\r\n\r\n  const toUniqueNames = (arr: Array<{vernacularName: string, language: string}>) => Array.from(new Set(arr.map(i => i.vernacularName.toUpperCase())));\r\n\r\n  // const validateAnimal = async (search: string) => {\r\n  //   try {\r\n\r\n  //     if (history.has(search)) { throw Error (\"Animal name was already used.\") }\r\n\r\n  //     // fetch animals where vernacular name contains search\r\n  //     const response = await fetch([url, params, search].join(\"\"));\r\n  //     const { results } = await response.json();\r\n\r\n  //     console.log(results);\r\n\r\n  //     if (!results.length) { throw Error (`Could not find animal named \"${search}\".`) }\r\n\r\n  //     // find exact match of vernacular name\r\n  //     const fetchedNames = results.map((a: any) => a.vernacularNames);\r\n  //     const fetchedNamesSorted = fetchedNames.sort((a: any[], b: any[]) => a.length - b.length);\r\n  //     const matchingNames = fetchedNamesSorted.find((arr: Array<{vernacularName: string, language: string}>) => {\r\n  //       return arr.some(({ vernacularName, language }) => vernacularName.toUpperCase() === search && language === \"eng\")\r\n  //     });\r\n\r\n  //     if (!matchingNames) { throw Error (`Could not find animal named \"${search}\".`) }\r\n\r\n  //     // get all english vernacular names of found animal\r\n  //     const matchingNamesEnglish = matchingNames.filter(({language}: {language: string}) => language === \"eng\");\r\n  //     const matchingNamesUnique = toUniqueNames(matchingNamesEnglish);\r\n  \r\n  //     return matchingNamesUnique;\r\n\r\n  //   } catch(err: any) { \r\n  //     if (err instanceof Error) {\r\n  //       setWordError(err.toString().split(\":\")[1]);\r\n  //       setTimeout(() => setWordError(\"\"), 2000);\r\n  //     };\r\n  //   };\r\n  // };\r\n\r\n  const validateAnimal = async (search: string) : Promise<{sname: string, vnames: string[]} | undefined> => {\r\n    try {\r\n      if (history.has(search)) { throw Error(\"Animal name was already used.\"); }\r\n  \r\n      // fetch animals where vernacular name contains search\r\n      const response = await fetch([url, params, search].join(\"\"));\r\n      const { results } = await response.json();\r\n  \r\n      // console.log(results);\r\n  \r\n      if (!results.length) { throw Error(`Could not find animal named \"${search}\".`); }\r\n  \r\n      // find exact match of vernacular name\r\n      const matchingAnimal = results.find((animal: any) => {\r\n        const matchingVernacularName = animal.vernacularNames.find((name: any) => {\r\n          return name.vernacularName.toUpperCase() === search && name.language === \"eng\";\r\n        });\r\n        return matchingVernacularName !== undefined;\r\n      });\r\n  \r\n      if (!matchingAnimal) { throw Error(`Could not find animal named \"${search}\".`); }\r\n  \r\n      // Get all english vernacular names and scientific name of the found animal\r\n      const matchingVernacularNamesEnglish = matchingAnimal.vernacularNames\r\n        .filter(({ language }: { language: string }) => language === \"eng\")\r\n        .map(({ vernacularName }: { vernacularName: string }) => vernacularName);\r\n      const scientificName = matchingAnimal.scientificName;\r\n  \r\n      return { sname: scientificName.split(/[\\s,]+/).slice(0,2).join(\" \"), vnames: matchingVernacularNamesEnglish };\r\n  \r\n    } catch (err: any) {\r\n      if (err instanceof Error) {\r\n        setWordError(err.toString().split(\":\")[1]);\r\n        setTimeout(() => setWordError(\"\"), 2000);\r\n      };\r\n    };\r\n  };\r\n\r\n  const submitSearch = (e: any) => {\r\n    e.preventDefault();\r\n\r\n    if (!submitDebounce) {\r\n      setSubmitDebounce(true);\r\n      setTimeout(async () => {\r\n\r\n        const endLetter = Array.from(history).at(-1)?.[0]?.at(-1);\r\n        const word = endLetter ? endLetter + e.target.animal.value : e.target.animal.value;\r\n\r\n        const animalValidated = await validateAnimal(word.toUpperCase());\r\n        console.log(animalValidated?.sname);\r\n\r\n        if (animalValidated) {\r\n          // const newHistory = [...Array.from(history), word.toUpperCase()];\r\n          // socket.emit(\"submit\", newHistory);\r\n          socket.emit(\"submit\", word.toUpperCase());\r\n          e.target.animal.value = \"\";\r\n        };\r\n\r\n        setSubmitDebounce(false);\r\n      }, 30); \r\n    };\r\n  };\r\n\r\n  // console.log(history, history.size);\r\n\r\n  return (\r\n    <form \r\n      className=\"wordForm\"\r\n      onSubmit={e => submitSearch(e)}\r\n      autoComplete=\"off\"\r\n    >\r\n      {\r\n        turnClientId === socket.id\r\n        ? <>\r\n            <span className=\"firstLetter\">\r\n              { history.size ? Array.from(history).at(-1)?.[0]?.at(-1) : \"\" }\r\n            </span>\r\n            <input \r\n              className=\"wordField\"\r\n              type=\"text\" \r\n              name=\"animal\"\r\n              placeholder={history.size ? \"...\" : \"animal name (common)\"}\r\n            />\r\n          </>\r\n        : <div className=\"wordDisplay\">\r\n            <i>Wait for other players to finish turn ...</i>\r\n          </div>\r\n      }\r\n      <div className=\"error\">\r\n        {wordError}\r\n      </div>\r\n    </form>\r\n  );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}