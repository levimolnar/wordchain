{"ast":null,"code":"import{createContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";;export const GameContext=/*#__PURE__*/createContext({roomState:[\"\",()=>{}],playerState:[[],()=>{}],turnClientState:[\"\",()=>{}],historyState:[new Map(),()=>{}]});export const GameProvider=_ref=>{let{children}=_ref;// const [players, setPlayers] = useState<string[]>([]);\n// const [turnClientId, setTurnClientId] = useState<string>(\"\");\n// const [history, setHistory] = useState<Set<string>>(new Set()); \n// const contextValue: GameContextType = {\n//   playerState: [players, setPlayers],\n//   turnClientState: [turnClientId, setTurnClientId],\n//   historyState: [history, setHistory],\n// };\nconst roomState=useState(\"\");const playerState=useState([]);const turnClientState=useState(\"\");// const historyState    = useState<Set<string>>(new Set()); \nconst historyState=useState(new Map());const contextValue={roomState,playerState,turnClientState,historyState};return/*#__PURE__*/_jsx(GameContext.Provider,{value:contextValue,children:children});};","map":{"version":3,"names":["createContext","useState","jsx","_jsx","GameContext","roomState","playerState","turnClientState","historyState","Map","GameProvider","_ref","children","contextValue","Provider","value"],"sources":["C:/Users/Levi/Desktop/chaingamegh/client/src/context/game.tsx"],"sourcesContent":["import { createContext, useState } from 'react';\n\ninterface GameContextType {\n  roomState: [string, React.Dispatch<React.SetStateAction<string>>];\n  playerState: [string[], React.Dispatch<React.SetStateAction<string[]>>];\n  turnClientState: [string, React.Dispatch<React.SetStateAction<string>>];\n  // historyState: [Set<string>, React.Dispatch<React.SetStateAction<Set<string>>>];\n  historyState: [Map<string, {userId: string, userNumber: number}>, React.Dispatch<React.SetStateAction<Map<string, {userId: string, userNumber: number}>>>];\n};\n\nexport const GameContext = createContext<GameContextType>({\n  roomState: [\"\", () => {}],\n  playerState: [[], () => {}],\n  turnClientState: [\"\", () => {}],\n  historyState: [new Map(), () => {}],\n});\n\nexport const GameProvider = ({ children }: any) => {\n\n  // const [players, setPlayers] = useState<string[]>([]);\n  // const [turnClientId, setTurnClientId] = useState<string>(\"\");\n  // const [history, setHistory] = useState<Set<string>>(new Set()); \n\n  // const contextValue: GameContextType = {\n  //   playerState: [players, setPlayers],\n  //   turnClientState: [turnClientId, setTurnClientId],\n  //   historyState: [history, setHistory],\n  // };\n\n  const roomState       = useState<string>(\"\");\n  const playerState     = useState<string[]>([]);\n  const turnClientState = useState<string>(\"\");\n  // const historyState    = useState<Set<string>>(new Set()); \n  const historyState    = useState<Map<string, {userId: string, userNumber: number}>>(new Map()); \n\n  const contextValue: GameContextType = {\n    roomState,\n    playerState,\n    turnClientState,\n    historyState,\n  };\n\n  return (\n    <GameContext.Provider value={contextValue}>\n      {children}\n    </GameContext.Provider>\n  )\n};"],"mappings":"AAAA,OAASA,aAAa,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAQ/C,CAED,MAAO,MAAM,CAAAC,WAAW,cAAGJ,aAAa,CAAkB,CACxDK,SAAS,CAAE,CAAC,EAAE,CAAE,IAAM,CAAC,CAAC,CAAC,CACzBC,WAAW,CAAE,CAAC,EAAE,CAAE,IAAM,CAAC,CAAC,CAAC,CAC3BC,eAAe,CAAE,CAAC,EAAE,CAAE,IAAM,CAAC,CAAC,CAAC,CAC/BC,YAAY,CAAE,CAAC,GAAI,CAAAC,GAAG,CAAC,CAAC,CAAE,IAAM,CAAC,CAAC,CACpC,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,YAAY,CAAGC,IAAA,EAAuB,IAAtB,CAAEC,QAAc,CAAC,CAAAD,IAAA,CAE5C;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,KAAM,CAAAN,SAAS,CAASJ,QAAQ,CAAS,EAAE,CAAC,CAC5C,KAAM,CAAAK,WAAW,CAAOL,QAAQ,CAAW,EAAE,CAAC,CAC9C,KAAM,CAAAM,eAAe,CAAGN,QAAQ,CAAS,EAAE,CAAC,CAC5C;AACA,KAAM,CAAAO,YAAY,CAAMP,QAAQ,CAAoD,GAAI,CAAAQ,GAAG,CAAC,CAAC,CAAC,CAE9F,KAAM,CAAAI,YAA6B,CAAG,CACpCR,SAAS,CACTC,WAAW,CACXC,eAAe,CACfC,YACF,CAAC,CAED,mBACEL,IAAA,CAACC,WAAW,CAACU,QAAQ,EAACC,KAAK,CAAEF,YAAa,CAAAD,QAAA,CACvCA,QAAQ,CACW,CAAC,CAE3B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}