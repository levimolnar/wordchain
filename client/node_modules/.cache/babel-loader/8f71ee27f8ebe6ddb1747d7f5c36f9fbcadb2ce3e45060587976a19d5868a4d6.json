{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\chaingame\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3001\");\nconst url = \"https://api.gbif.org/v1/species/search\";\nconst params = \"?highertaxon_key=1&qField=VERNACULAR&limit=250&q=\";\nconst History = ({\n  history\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"history\",\n  children: history.map((word, i) => {\n    const sizeFactor = 2 / Math.cbrt(history.length - i);\n    const opacityFactor = 1 / Math.sqrt(history.length - i);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: `${sizeFactor}em`,\n        opacity: opacityFactor\n      },\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }, this);\n  })\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n_c = History;\nconst WordInput = ({\n  historyState: [history, setHistory]\n}) => {\n  _s();\n  var _history$at2;\n  const [submitDebounce, setSubmitDebounce] = useState(false);\n  const [wordError, setWordError] = useState(\"\");\n  const toUniqueNames = arr => Array.from(new Set(arr.map(i => i.vernacularName.toUpperCase())));\n  const validateAnimal = async search => {\n    try {\n      if (history.includes(search)) {\n        throw Error(\"Animal was already used.\");\n      }\n      const response = await fetch([url, params, search].join(\"\"));\n      const {\n        results\n      } = await response.json();\n      if (!results.length) {\n        throw Error(\"Animal could not be found.\");\n      }\n      const fetchedNames = results.map(a => a.vernacularNames);\n      const fetchedNamesSorted = fetchedNames.sort((a, b) => a.length - b.length);\n      const matchingNames = fetchedNamesSorted.find(arr => {\n        return arr.some(({\n          vernacularName,\n          language\n        }) => vernacularName.toUpperCase() === search && language === \"eng\");\n      });\n      if (!matchingNames) {\n        throw Error(\"Animal could not be found.\");\n      }\n      const matchingNamesEnglish = matchingNames.filter(({\n        language\n      }) => language === \"eng\");\n      const matchingNamesUnique = toUniqueNames(matchingNamesEnglish);\n      return matchingNamesUnique;\n    } catch (err) {\n      if (err instanceof Error) {\n        setWordError(err.toString().split(\":\")[1]);\n        setTimeout(() => setWordError(\"\"), 2000);\n      }\n      ;\n    }\n    ;\n  };\n  const submitSearch = e => {\n    // React.FormEvent<HTMLFormElement>\n    e.preventDefault();\n    if (!submitDebounce) {\n      setSubmitDebounce(true);\n      setTimeout(async () => {\n        var _history$at;\n        const previousEndLetter = (_history$at = history.at(-1)) === null || _history$at === void 0 ? void 0 : _history$at.at(-1);\n        const word = previousEndLetter ? previousEndLetter + e.target.animal.value : e.target.animal.value;\n        const animalValidated = await validateAnimal(word.toUpperCase());\n        // console.log(\"found:\", animalValidated);\n\n        if (animalValidated) {\n          setHistory(prev => [...prev, word.toUpperCase()]);\n          e.target.animal.value = \"\";\n          socket.emit(\"animal\", word.toUpperCase());\n        }\n        ;\n        setSubmitDebounce(false);\n      }, 30);\n    }\n    ;\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"wordForm\",\n    onSubmit: e => submitSearch(e),\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"firstLetter\",\n      children: (_history$at2 = history.at(-1)) === null || _history$at2 === void 0 ? void 0 : _history$at2.at(-1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"wordField\",\n      type: \"text\",\n      name: \"animal\",\n      placeholder: history.length ? \"\" : \"animal common name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: wordError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(WordInput, \"6e7JyT/g/ONkRkoD97V6ULqAw0k=\");\n_c2 = WordInput;\nconst App = () => {\n  _s2();\n  const [history, setHistory] = useState(new Set());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        top: \"25%\",\n        position: \"relative\",\n        width: \"50%\",\n        height: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(History, {\n        history: history\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordInput, {\n        historyState: [history, setHistory]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s2(App, \"IOfWqJwoAqHg58FLuy0prVGqVjs=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"History\");\n$RefreshReg$(_c2, \"WordInput\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","io","jsxDEV","_jsxDEV","socket","url","params","History","history","className","children","map","word","i","sizeFactor","Math","cbrt","length","opacityFactor","sqrt","style","fontSize","opacity","fileName","_jsxFileName","lineNumber","columnNumber","_c","WordInput","historyState","setHistory","_s","_history$at2","submitDebounce","setSubmitDebounce","wordError","setWordError","toUniqueNames","arr","Array","from","Set","vernacularName","toUpperCase","validateAnimal","search","includes","Error","response","fetch","join","results","json","fetchedNames","a","vernacularNames","fetchedNamesSorted","sort","b","matchingNames","find","some","language","matchingNamesEnglish","filter","matchingNamesUnique","err","toString","split","setTimeout","submitSearch","e","preventDefault","_history$at","previousEndLetter","at","target","animal","value","animalValidated","prev","emit","onSubmit","autoComplete","type","name","placeholder","_c2","App","_s2","top","position","width","height","_c3","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/chaingame/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport { io } from 'socket.io-client';\nconst socket = io(\"http://localhost:3001\");\n\nconst url = \"https://api.gbif.org/v1/species/search\"\nconst params = \"?highertaxon_key=1&qField=VERNACULAR&limit=250&q=\"\n\nconst History = ({history}: {history: string[]}) => (\n  <div className=\"history\">\n    { \n      history.map((word, i) => {\n        const sizeFactor = 2 / Math.cbrt(history.length - i);\n        const opacityFactor = 1 / Math.sqrt(history.length - i);\n\n        return (\n          <div \n            style={{\n              fontSize: `${sizeFactor}em`,\n              opacity: opacityFactor,\n            }}\n          >\n            {word}\n          </div>\n        )\n      })\n    }\n  </div>\n);\n\nconst WordInput = ({\n  historyState: [history, setHistory], \n}: {\n  historyState: [string[], React.Dispatch<React.SetStateAction<string[]>>], \n}) => {\n\n  const [submitDebounce, setSubmitDebounce] = useState<boolean>(false);\n  const [wordError, setWordError] = useState<string>(\"\");\n\n  const toUniqueNames = (arr: Array<{vernacularName: string, language: string}>) => Array.from(new Set(arr.map(i => i.vernacularName.toUpperCase())));\n\n  const validateAnimal = async (search: string) => {\n    try {\n\n      if (history.includes(search)) { throw Error (\"Animal was already used.\") }\n\n      const response = await fetch([url, params, search].join(\"\"));\n      const { results } = await response.json();\n\n      if (!results.length) { throw Error (\"Animal could not be found.\") }\n\n      const fetchedNames = results.map((a: any) => a.vernacularNames);\n      const fetchedNamesSorted = fetchedNames.sort((a: any[], b: any[]) => a.length - b.length);\n      const matchingNames = fetchedNamesSorted.find((arr: Array<{vernacularName: string, language: string}>) => {\n        return arr.some(({ vernacularName, language }) => vernacularName.toUpperCase() === search && language === \"eng\")\n      });\n\n      if (!matchingNames) { throw Error (\"Animal could not be found.\") }\n\n      const matchingNamesEnglish = matchingNames.filter(({language}: {language: string}) => language === \"eng\");\n      const matchingNamesUnique = toUniqueNames(matchingNamesEnglish);\n  \n      return matchingNamesUnique;\n\n    } catch(err: any) { \n      if (err instanceof Error) {\n        setWordError(err.toString().split(\":\")[1]);\n        setTimeout(() => setWordError(\"\"), 2000);\n      };\n    };\n  };\n\n  const submitSearch = (e: any) => { // React.FormEvent<HTMLFormElement>\n    e.preventDefault();\n\n    if (!submitDebounce) {\n      setSubmitDebounce(true);\n      setTimeout(async () => {\n\n        const previousEndLetter = history.at(-1)?.at(-1);\n        const word = previousEndLetter ? previousEndLetter + e.target.animal.value : e.target.animal.value;\n\n        const animalValidated = await validateAnimal(word.toUpperCase());\n        // console.log(\"found:\", animalValidated);\n\n        if (animalValidated) {\n          setHistory(prev => [...prev, word.toUpperCase()]);\n          e.target.animal.value = \"\";\n          socket.emit(\"animal\", word.toUpperCase());\n        };\n\n        setSubmitDebounce(false);\n      }, 30); \n    };\n  };\n\n  return (\n    <form \n      className=\"wordForm\"\n      onSubmit={e => submitSearch(e)}\n      autoComplete=\"off\"\n    >\n      <span className=\"firstLetter\">\n        {history.at(-1)?.at(-1)}\n      </span>\n      <input \n        className=\"wordField\"\n        type=\"text\" \n        name=\"animal\"\n        placeholder={history.length ? \"\" : \"animal common name\"}\n      />\n      <div className=\"error\">\n        {wordError}\n      </div>\n    </form>\n  );\n};\n\nconst App = () => {\n\n  const [history, setHistory] = useState<Set<string>>(new Set());\n\n  return (\n    <div className=\"app\">\n      <div style={{top: \"25%\", position: \"relative\", width: \"50%\", height: \"auto\"}}>\n        <History history={history}/>\n        <WordInput historyState={[history, setHistory]}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}